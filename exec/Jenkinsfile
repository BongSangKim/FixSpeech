pipeline{
	agent any
   
stages{
    	stage('Checkout'){
        	steps{
            	git branch: 'dev',
             	credentialsId: 'KBS-Git', 
            	url: "https://lab.ssafy.com/s11-final/S11P31D206.git"
            } 
    	}
    	
    	stage('Build Front') {
            steps {
                dir('/var/jenkins_home/workspace/FIXSPEECH/frontend/'){
                    sh 'ls -al'
                    sh 'whoami'
                    
                    sh 'docker ps -a'
                    // react_container 존재하면 멈추고 삭제하기
                    sh '''
                      if [ "$(docker ps -aq -f name=react_container)" ]; then
                            docker stop react_container
                            docker rm react_container
                        fi
                    '''
                    
                    // 'react-image'이라는 이미지가 존재하는지 확인하고 삭제
                    sh '''
                        if [ "$(docker images -q react-image 2> /dev/null)" != "" ]; then
                            docker rmi react-image
                        fi
                    '''

                    sh 'docker build --no-cache -t react-image .'
                    // 위 명령어까지 진행되면 
                    
                    // 컨테이너가 존재하면 삭제
                    sh '''
                    if [ "$(docker ps -aq -f name=react_container)" ]; then
                        docker rm -f react_container
                    fi
                    '''
                    // 새로운 컨테이너 생성
                    sh '''
                    docker run -d --name react_container \
                      -p 80:80 \
                      -p 443:443 \
                      -v /home/ubuntu/https/data/certbot/conf/live/k11d206.p.ssafy.io/fullchain.pem:/etc/nginx/ssl/fullchain.pem:ro \
                      -v /home/ubuntu/https/data/certbot/conf/live/k11d206.p.ssafy.io/privkey.pem:/etc/nginx/ssl/privkey.pem:ro \
                      react-image
                    '''
                    
                     }
                
                
            }
        }
    
        stage('Build FastAPI') {
            steps {
                dir('/var/jenkins_home/workspace/FIXSPEECH/backend/fast-api-audio/') {
                    sh 'ls -al'
                    
                    // 기존 컨테이너 정리
                    sh '''
                        if [ "$(docker ps -aq -f name=fastapi_container)" ]; then
                            docker stop fastapi_container
                            docker rm fastapi_container
                        fi
                    '''
                    
                    // 기존 이미지 정리
                    sh '''
                        if [ "$(docker images -q fastapi-image 2> /dev/null)" != "" ]; then
                            docker rmi fastapi-image
                        fi
                    '''

                    // 새 이미지 빌드 및 실행
                    sh 'docker build --no-cache -t fastapi-image .'
                    sh 'docker run -d --name fastapi_container -p 8000:8000 fastapi-image'
                }
            }
        }
    	
        
           stage('env file download and play cp execute') {
	        steps {
    	        withCredentials([file(credentialsId: 'env', variable: 'envfile')]) {
        	        script {
                sh '''
                    if [ -f /var/jenkins_home/workspace/FIXSPEECH/backend/spring-server/src/main/resources/.env ]; then
                        rm /var/jenkins_home/workspace/FIXSPEECH/backend/spring-server/src/main/resources/.env
                    fi
                '''
                sh 'cp $envfile /var/jenkins_home/workspace/FIXSPEECH/backend/spring-server/src/main/resources/.env'
            }
		        }
	        }
        }
        
        stage('Build Backend'){
            steps {
                dir('/var/jenkins_home/workspace/FIXSPEECH/backend/spring-server/'){
                    
                    
                    
                    
                    sh 'ls -al'
                    sh 'whoami'
                    
                    sh 'groups jenkins'
                    sh 'docker ps -a'
                    // my_container가 존재하면 멈추고 삭제하기
                    sh '''
                      if [ "$(docker ps -aq -f name=my_container)" ]; then
                            docker stop my_container
                            docker rm my_container
                        fi
                    '''
                    
                    
                    
                    // 'tem'이라는 이미지가 존재하는지 확인하고 삭제
                    sh '''
                        if [ "$(docker images -q tem_test 2> /dev/null)" != "" ]; then
                            docker rmi tem
                        fi
                    '''

                    sh 'docker build -t tem .'
                    // 위 명령어까지 진행되면 
                    
                    // 컨테이너가 존재하면 삭제
                    sh '''
                    if [ "$(docker ps -aq -f name=my_container_test)" ]; then
                        docker rm -f my_container
                    fi
                    '''
                    // 새로운 컨테이너 생성
                    sh 'docker run -d --name my_container -p 8081:8081 tem'
                    
                    }
                }
            }
        }
    }