# 백엔드 서버 그룹 정의
upstream backend {
    server k11d206.p.ssafy.io:8081;  # 스프링 부트 백엔드
}

# FastAPI 서버 그룹 정의
upstream fastapi {
    server k11d206.p.ssafy.io:8000;  # FastAPI 서버
}

# HTTP to HTTPS redirection
server {
    listen 80;                        # HTTP 포트 80 리스닝
    listen [::]:80;                   # IPv6 지원
    server_name k11d206.p.ssafy.io;   # 서버 도메인 이름

    # 모든 HTTP 요청을 HTTPS로 리디렉션 (301 영구 리다이렉트)
    return 301 https://$host$request_uri;
    
    # 검색엔진 크롤러 차단 설정
    location /robots.txt {
        return 200 "User-agent: *\nDisallow: /"; # 모든 봇의 접근을 차단
    }
}

# HTTPS 설정을 위한 메인 서버 블록
server {
    listen 443 ssl;                   # HTTPS 포트 443 리스닝 (SSL/TLS 활성화)
    server_name k11d206.p.ssafy.io;   # 서버 도메인 이름

    # SSL 인증서 설정 (Let's Encrypt 사용)
    ssl_certificate /etc/nginx/ssl/fullchain.pem;      # SSL 인증서 경로
    ssl_certificate_key /etc/nginx/ssl/privkey.pem;    # SSL 개인키 경로

    # SSL 보안 설정 강화
    ssl_protocols TLSv1.2 TLSv1.3;                    # TLS 버전 지정
    ssl_prefer_server_ciphers on;                     # 서버 암호화 방식 우선
    ssl_ciphers HIGH:!aNULL:!MD5;                     # 강력한 암호화 알고리즘 사용

    # 웹 서버 기본 설정
    root /usr/share/nginx/html;       # 웹 루트 디렉토리
    index index.html;                 # 기본 인덱스 파일

    # 클라이언트 요청 제한 설정
    client_max_body_size 100M;         # 최대 업로드 크기 100MB로 제한

    # 기본 CORS 헤더 설정
    add_header 'Access-Control-Allow-Origin' '*';                          # 모든 도메인 허용
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';        # 허용할 HTTP 메서드
    add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization'; # 허용할 헤더

    # FastAPI 서버로의 프록시 설정
    location /fastapi/ {
        proxy_pass http://fastapi/;    # FastAPI 서버로 요청 전달
        
        # 프록시 헤더 설정
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket 지원 설정
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # 스프링 부트 API 요청 처리 설정
    location /api/ {
        # 로깅 설정
        error_log /var/log/nginx/api_error.log debug;  # 에러 로그
        access_log /var/log/nginx/api_access.log;      # 접근 로그

        # 백엔드 서버로 프록시
        proxy_pass http://backend/;    # 백엔드 서버로 요청 전달
        
        # 프록시 버퍼 설정
        proxy_buffers 16 32k;          # 버퍼 크기 및 개수
        proxy_buffer_size 32k;         # 초기 버퍼 크기
        
        # 프록시 헤더 설정
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 타임아웃 설정 (300초)
        proxy_connect_timeout 300;     # 연결 타임아웃
        proxy_send_timeout 300;        # 전송 타임아웃
        proxy_read_timeout 300;        # 읽기 타임아웃

        # CORS 프리플라이트 요청 처리
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' '*' always;
            add_header 'Access-Control-Max-Age' 1728000 always;  # 프리플라이트 캐시 시간 (20일)
            return 204;  # No Content 응답
        }

        # 일반 요청에 대한 CORS 헤더
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' '*' always;
    }

    # 정적 파일 처리 설정
    location ~* \.(js|css|html|jpg|jpeg|png|gif|ico)$ {
        try_files $uri =404;           # 파일이 없으면 404 에러
    }

    # SPA를 위한 기본 라우팅 설정
    location / {
        try_files $uri $uri/ /index.html;  # SPA 라우팅을 위한 폴백
    }

    # 검색엔진 크롤러 차단 설정
    location /robots.txt {
        return 200 "User-agent: *\nDisallow: /";  # 모든 봇의 접근을 차단
    }
}
